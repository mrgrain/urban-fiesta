name: action
on:
  workflow_dispatch: {}
  push:
    branches:
      - "main"
jobs:
  do_stuff:
    name: "Upload to S3"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: releasing
    steps:
      - run: |-
          mkdir -p dist
          echo "1.0.0" > dist/version.txt
          touch dist/docs.zip
          echo "1.0.0" > dist/docs.zip
      - name: Authenticate Via OIDC Role
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME_FOR_ACCOUNT }}
          role-session-name: mrgrain@urban-fiesta
          mask-aws-account-id: true
      - name: Assume the publishing role
        id: publishing-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ vars.PUBLISH_ROLE_ARN }}
          role-session-name: mrgrain@urban-fiesta
          mask-aws-account-id: true
          role-chaining: true
      - name: Publish docs
        env:
          BUCKET_NAME: ${{ vars.DOCS_BUCKET_NAME }}
          DOCS_STREAM: toolkit-lib
        run: |
          echo "Uploading docs to S3"
          echo "::add-mask::$BUCKET_NAME"
          S3_PATH="$DOCS_STREAM/aws-cdk-toolkit-lib-v$(cat dist/version.txt).zip"
          LATEST="latest-toolkit-lib"

          # Capture both stdout and stderr
          if OUTPUT=$(aws s3api put-object \
            --bucket "$BUCKET_NAME" \
            --key "$S3_PATH" \
            --body dist/docs.zip \
            --if-none-match "*" 2>&1); then
            
            # File was uploaded successfully, update the latest pointer
            echo "New docs artifact uploaded successfully, updating latest pointer"
            echo "$S3_PATH" | aws s3 cp - "s3://$BUCKET/$LATEST"

          elif echo "$OUTPUT" | grep -q "PreconditionFailed"; then
            # Check specifically for PreconditionFailed in the error output
            echo "::warning::File already exists in S3. Skipping upload."
            exit 0

          else
            # Any other error (permissions, etc)
            echo "::error::Failed to upload docs artifact: $OUTPUT"
            exit 1
          fi
